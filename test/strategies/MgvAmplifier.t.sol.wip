// SPDX-License-Identifier:	AGPL-3.0
pragma solidity ^0.8.10;

import {StratTest, MgvReader, TestMaker, TestTaker, TestSender, console} from "@mgv-strats/test/lib/StratTest.sol";

import {IMangrove} from "@mgv/src/IMangrove.sol";
import {
  MangroveAmplifier,
  SmartRouter,
  RouterProxyFactory,
  RouterProxy
} from "@mgv-strats/src/strategies/MangroveAmplifier.sol";
import {MangroveOffer} from "@mgv-strats/src/strategies/MangroveOffer.sol";
import {AbstractRouter, RL} from "@mgv-strats/src/strategies/routers/abstract/AbstractRouter.sol";
import {SimpleAaveLogic} from "@mgv-strats/src/strategies/routing_logic/SimpleAaveLogic.sol";
import {IPoolAddressesProvider} from "@mgv-strats/src/strategies/vendor/aave/v3/IPoolAddressesProvider.sol";

import {PinnedPolygonFork} from "@mgv/test/lib/forks/Polygon.sol";
import {TransferLib} from "@mgv/lib/TransferLib.sol";
import {MgvLib, IERC20, OLKey, Offer, OfferDetail} from "@mgv/src/core/MgvLib.sol";
import {TestToken} from "@mgv/test/lib/tokens/TestToken.sol";
import {toFixed} from "@mgv/lib/Test2.sol";
import {TickLib} from "@mgv/lib/core/TickLib.sol";
import {MAX_TICK} from "@mgv/lib/core/Constants.sol";
import {Tick} from "@mgv/lib/core/TickLib.sol";

contract MgvAmplifierTest is StratTest {
  RouterProxyFactory internal routerFactory; // deployed routerFactory
  SimpleAaveLogic internal aaveLogic; // deployed simple aave router implementation
  MangroveAmplifier internal mgvAmpl; // MangroveAmplifier contract

  // roles
  address deployer = freshAddress("deployer"); // deploys contracts
  address owner = freshAddress("owner"); // owns an amplified offer
  address taker = freshAddress("taker"); // takes offers

  function setUp() public {
    // forking polygon in order to use AAVE
    PinnedPolygonFork fork = new PinnedPolygonFork(39880000);
    fork.setUp();
    options.gasprice = 90;
    options.gasbase = 68_000;
    options.defaultFee = 30;
    mgv = setupMangrove();

    vm.startPrank(deployer);
    routerFactory = new RouterProxyFactory();
    aaveLogic = new SimpleAaveLogic(IPoolAddressesProvider(fork.get("AaveAddressProvider")), 2);
    mgvAmpl = new MangroveAmplifier(mgv, routerFactory, deployer);
    vm.stopPrank();

    reader = new MgvReader($(mgv));
    base = TestToken(fork.get("WETH.e"));
    quote = TestToken(fork.get("DAI.e"));
    olKey = OLKey(address(base), address(quote), options.defaultTickSpacing);
    lo = olKey.flipped();
    setupMarket(olKey);
  }
}
